{"version":3,"sources":["redux/reducers/posts/types.ts","redux/reducers/posts/selectors.ts","helpers/api.ts","redux/reducers/posts/action-creators.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","redux/reducers/posts/posts.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["ActionTypes","Posts","state","posts","postsList","SelectedPost","activePost","Comments","comments","Details","details","request","url","options","fetch","then","res","json","PostsActionCreators","type","SET_POSTS","payload","SET_ACTIVE_POST","postDetails","SET_DETAILS","SET_COMMENTS","commentData","dispatch","comment","method","headers","body","JSON","stringify","postId","name","email","ADD_COMMENT","commentId","deleteComment","DELETE_COMMENT","PostsList","useDispatch","useSelector","activePostId","openPost","className","length","map","post","id","title","onClick","NewCommentForm","selectedPostId","useState","nameValue","emailValue","bodyValue","formValue","setFormValue","onSubmit","e","preventDefault","addNewCommentHandler","placeholder","value","onChange","target","PostDetails","isCommentShow","setIsCommentShow","useEffect","data","getPostComments","deleteCommentHandler","App","selectedUser","setSelectedUser","userId","initialState","action","filter","item","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57753805.chunk.js","sourcesContent":["import { CommentType, NewComment } from '../../../types/CommentType';\nimport { Details } from '../../../types/Details';\nimport { Post } from '../../../types/Post';\n\nexport enum ActionTypes {\n  SET_POSTS = 'SET_POSTS',\n  SET_ACTIVE_POST = 'SET_ACTIVE_POST',\n  SET_COMMENTS = 'SET_COMMETNS',\n  DELETE_COMMENT = 'DELETE_COMMENT',\n  SET_DETAILS = 'SET_DETAILS',\n  ADD_COMMENT = 'ADD_COMMENT',\n}\n\nexport interface SetPostsAction {\n  type: ActionTypes.SET_POSTS,\n  payload: Post,\n}\n\nexport interface SetActivePostAction {\n  type: ActionTypes.SET_ACTIVE_POST,\n  payload: number | null,\n}\n\nexport interface SetPostDetailsAction {\n  type: ActionTypes.SET_DETAILS,\n  payload: Details,\n}\n\nexport interface SetCommentsAction {\n  type: ActionTypes.SET_COMMENTS,\n  payload: CommentType[],\n}\n\nexport interface AddNewCommentAction {\n  type: ActionTypes.ADD_COMMENT,\n  payload: NewComment,\n}\n\nexport interface DeleteCommentAction {\n  type: ActionTypes.DELETE_COMMENT,\n  payload: number,\n}\n\nexport type PostAction =\n  SetPostsAction |\n  SetActivePostAction |\n  SetPostDetailsAction |\n  SetCommentsAction |\n  AddNewCommentAction |\n  DeleteCommentAction;\n","import { RootState } from '../../store';\n\nexport const Posts = (state: RootState) => state.posts.postsList;\n\nexport const SelectedPost = ({ posts }: RootState) => (\n  posts.activePost\n);\n\nexport const Comments = ({ posts }: RootState) => posts.comments;\n\nexport const Details = ({ posts }: RootState) => posts.details;\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string, options?: {}) => fetch(`${BASE_URL}${url}`, options)\n  .then(res => res.json());\n\nexport const getUserPosts = (userId: number) => {\n  if (userId !== 0) {\n    return request(`/posts?userId=${userId}`);\n  }\n\n  return request('/posts');\n};\n\nexport const getPostDetails = (postId: number) => request(`/posts/${postId}`);\n\nexport const getPostComments = (postId: number) => request(`/comments?postId=${postId}`);\n\nexport const deleteComment = (commentId: number) => request(\n  `/comments/${commentId}`,\n  {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  },\n);\n\nexport const addComment = (comment: {\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n}) => request(\n  '/comments',\n  {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId: comment.postId,\n      name: comment.name,\n      email: comment.email,\n      body: comment.body,\n    }),\n  },\n);\n","import { addComment, deleteComment } from '../../../helpers/api';\nimport { CommentType, NewComment } from '../../../types/CommentType';\nimport { Details } from '../../../types/Details';\nimport { Post } from '../../../types/Post';\nimport {\n  ActionTypes,\n  SetActivePostAction,\n  SetPostsAction,\n} from './types';\n\nexport const PostsActionCreators = {\n  setPosts: (postsList: Post): SetPostsAction => ({\n    type: ActionTypes.SET_POSTS,\n    payload: postsList,\n  }),\n  setActivePost: (activePost: number | null): SetActivePostAction => ({\n    type: ActionTypes.SET_ACTIVE_POST,\n    payload: activePost,\n  }),\n  setPostDetails: (postDetails: Details) => ({\n    type: ActionTypes.SET_DETAILS,\n    payload: postDetails,\n  }),\n  setComments: (comments: CommentType[]) => ({\n    type: ActionTypes.SET_COMMENTS,\n    payload: comments,\n  }),\n  // eslint-disable-next-line\n  addNewComment: (commentData: NewComment) => (dispatch: any) => {\n    addComment(commentData)\n      .then(() => {\n        dispatch({\n          type: ActionTypes.ADD_COMMENT,\n          payload: commentData,\n        });\n      });\n  },\n  // eslint-disable-next-line\n  deleteCommentAction: (commentId: number) => (dispatch: any) => {\n    deleteComment(commentId)\n      .then(() => {\n        dispatch({\n          type: ActionTypes.DELETE_COMMENT,\n          payload: commentId,\n        });\n      });\n  },\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostsActionCreators }\n  from '../../redux/reducers/posts/action-creators';\nimport { Posts, SelectedPost } from '../../redux/reducers/posts/selectors';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(Posts);\n  const activePostId = useSelector(SelectedPost);\n\n  const openPost = (postId: number | null) => {\n    dispatch(PostsActionCreators.setActivePost(postId));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.length > 0 && posts.map((post) => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.id}]: `}</b>\n              {post.title}\n            </div>\n            {post.id === activePostId ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  openPost(null);\n                }}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  openPost(post.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostsActionCreators }\n  from '../../redux/reducers/posts/action-creators';\nimport { SelectedPost } from '../../redux/reducers/posts/selectors';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedPostId = useSelector(SelectedPost);\n\n  const [formValue, setFormValue] = useState({\n    nameValue: '',\n    emailValue: '',\n    bodyValue: '',\n  });\n\n  const changeNameHandler = (value: string) => {\n    setFormValue((state) => ({\n      ...state,\n      nameValue: value,\n    }));\n  };\n\n  const changeEmailHandler = (value: string) => {\n    setFormValue((state) => ({\n      ...state,\n      emailValue: value,\n    }));\n  };\n\n  const changeBodyHandler = (value: string) => {\n    setFormValue((state) => ({\n      ...state,\n      bodyValue: value,\n    }));\n  };\n\n  const addNewCommentHandler = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (selectedPostId) {\n      const comment = {\n        name: formValue.nameValue,\n        email: formValue.emailValue,\n        body: formValue.bodyValue,\n        postId: selectedPostId,\n      };\n\n      dispatch(PostsActionCreators.addNewComment(comment));\n      setFormValue({\n        nameValue: '',\n        emailValue: '',\n        bodyValue: '',\n      });\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(e) => addNewCommentHandler(e)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={formValue.nameValue}\n          onChange={(e) => changeNameHandler(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={formValue.emailValue}\n          onChange={(e) => changeEmailHandler(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={formValue.bodyValue}\n          onChange={(e) => changeBodyHandler(e.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPostDetails, getPostComments } from '../../helpers/api';\nimport { PostsActionCreators }\n  from '../../redux/reducers/posts/action-creators';\nimport {\n  Comments,\n  SelectedPost,\n  Details,\n} from '../../redux/reducers/posts/selectors';\nimport { CommentType } from '../../types/CommentType';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const comments = useSelector(Comments);\n  const selectedPostId = useSelector(SelectedPost);\n  const postDetails = useSelector(Details);\n\n  const [isCommentShow, setIsCommentShow] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (selectedPostId) {\n      getPostDetails(selectedPostId)\n        .then(data => dispatch(PostsActionCreators.setPostDetails(data)));\n      getPostComments(selectedPostId)\n        .then(data => dispatch(PostsActionCreators.setComments(data)));\n    }\n  }, [selectedPostId]);\n\n  const deleteCommentHandler = (comment: CommentType) => {\n    dispatch(PostsActionCreators.deleteCommentAction(comment.id));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {postDetails && (\n        <>\n          <h2>{`Post details: ${selectedPostId}`}</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{postDetails.title}</p>\n          </section>\n\n          {comments.length > 0 && (\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setIsCommentShow(!isCommentShow)}\n              >\n                {isCommentShow ? (\n                  `Hide ${comments.length} comments`\n                ) : (\n                  `Show ${comments.length} comments`\n                )}\n              </button>\n\n              {isCommentShow && (\n                <ul className=\"PostDetails__list\" data-cy=\"postDetails\">\n                  {comments.map((comment: CommentType) => (\n                    <li\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => deleteCommentHandler(comment)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              {selectedPostId && (\n                <NewCommentForm />\n              )}\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SelectedPost } from './redux/reducers/posts/selectors';\nimport { PostsActionCreators } from './redux/reducers/posts/action-creators';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './helpers/api';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedPostId = useSelector(SelectedPost);\n  const [selectedUser, setSelectedUser] = useState(0);\n\n  useEffect(() => {\n    getUserPosts(selectedUser)\n      .then(data => dispatch(PostsActionCreators.setPosts(data)));\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={(e) => setSelectedUser(+e.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        {selectedPostId !== null && (\n          <div className=\"App__content\">\n            <PostDetails />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { CommentType } from '../../../types/CommentType';\nimport { ActionTypes, PostAction } from './types';\n\nconst initialState = {\n  postsList: [],\n  activePost: null,\n  comments: [],\n  details: [],\n};\n\nconst posts = (state = initialState, action: PostAction) => {\n  switch (action.type) {\n    case ActionTypes.SET_POSTS:\n      return {\n        ...state,\n        postsList: action.payload,\n      };\n\n    case ActionTypes.SET_ACTIVE_POST:\n      return {\n        ...state,\n        activePost: action.payload,\n      };\n\n    case ActionTypes.SET_COMMENTS:\n      return {\n        ...state,\n        comments: action.payload,\n      };\n\n    case ActionTypes.DELETE_COMMENT:\n      return {\n        ...state,\n        comments: state.comments.filter((item: CommentType) => (\n          item.id !== action.payload\n        )),\n      };\n\n    case ActionTypes.ADD_COMMENT:\n      return {\n        ...state,\n        comments: [...state.comments, action.payload],\n      };\n\n    case ActionTypes.SET_DETAILS:\n      return {\n        ...state,\n        details: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default posts;\n","import { combineReducers } from 'redux';\nimport posts from './posts/posts';\n\nconst rootReducer = combineReducers({\n  posts,\n});\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { CommentType } from '../types/CommentType';\nimport { Details } from '../types/Details';\nimport { Post } from '../types/Post';\nimport rootReducer from './reducers';\n\nexport interface RootState {\n  posts: {\n    postsList: Post[],\n    activePost: number | null,\n    comments: CommentType[],\n    details: Details\n  }\n}\n\n// eslint-disable-next-line\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n  || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './redux/store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}